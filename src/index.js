'use strict';

import "./tailwind.css";
require("./theme.css");
require("./styles.scss");
import '@github/clipboard-copy-element';

const {Elm} = require('./Main');

const bytesKey = "bytes"
const bearerKey = "bearer"

const flags = {
    bytes: rememberedBytes(),
    bearer: JSON.parse(localStorage.getItem(bearerKey))
}

var app = Elm.Main.init({flags: flags});


app.ports.storeSession.subscribe(function (val) {
    if (val === null) { // logout
        localStorage.removeItem(bearerKey);
    } else {
        localStorage.setItem(bearerKey, JSON.stringify(val));
    }
    // send message to Elm to notify session has been saved
    // https://stackoverflow.com/questions/779379/why-is-settimeoutfn-0-sometimes-useful
    setTimeout(function () { app.ports.onSessionChange.send(val); }, 0);
});

// Listen for localStorage changes
window.addEventListener("storage", function (event) {
    if (event.storageArea === localStorage && event.key === bearerKey) {
        app.ports.onSessionChange.send(JSON.parse(event.newValue));
    }
}, false);

/* Fetch back generated bytes from the local storage */
function rememberedBytes() {
    const bytes = localStorage.getItem(bytesKey);
    return bytes ? bytes.split(",").map(x => parseInt(x,10)) : null;
}

/* Generate high entropy random bytes using the Web Crypto API and
remember them so that they are preserved between redirections. This
allows to protect for XSS & authorization code attacks */
app.ports.genRandomBytes.subscribe(n => {
    const buffer = new Uint8Array(n);
    crypto.getRandomValues(buffer);
    const bytes = Array.from(buffer);
    localStorage.setItem(bytesKey, bytes);
    app.ports.randomBytes.send(bytes);
});
